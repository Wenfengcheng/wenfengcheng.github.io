<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[xamarin-ios-binding-cocoapod-advanced]]></title>
    <url>%2Funcategorized%2Fxamarin-ios-binding-cocoapod-advanced%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[xamarin-ios-binding-cocoapod]]></title>
    <url>%2FBindings%2Fxamarin-ios-binding-cocoapod%2F</url>
    <content type="text"><![CDATA[###本文主要讲解使用CocoaPods进行第三方库的导入和使用之前我给大家分享过两篇关于使用OC源生类库的介绍，但是那些方法还得自己去新建一个静态库然后进行将类库转化为C#支持的属性和方法，依然很复杂，在OC中我们知道有CocoaPods去帮助OC程序员们自动去导入第三方的框架，方便使用而且对于版本更新的问题也很好处理，在Xamarin中也为我们提供了相应的简单方法，Xamarin同样支持我们使用CocoaPods去导入第三方库，那么我们就看看CocoaPods在Xamarin中是如何使用的。 本文目录结构1.CocoaPods简介2.CocoaPods环境安装和配置3.CocoaPods的使用4.建立绑定类库时候的问题处理 CocoaPods简介OC中的CocoaPodsCocoaPods是一个负责管理iOS项目中第三方开源库的工具。如果你熟悉OC的话，对于CocoaPods应该不算陌生了，在使用Xcode开发的时候我们通常将导入第三方开源库这个工作交由CocoaPods来自动处理。我们不需要再去像手动导入第三方库一样去设置某些编译参数和导入必须的框架。在我们有了CocoaPods这个工具之后，只需要将用到的第三方开源库放到一个名为Podfile的文件中，然后在命令行执行 pod install命令。CocoaPods就会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。 Xamarin中的CocoaPods在Xamarin中Objective Sharpie3.0版中出现了新功能支持绑定CocoaPods，甚至还有一个终端命令（sharpie pod）来提供下载，配置和构建CocoaPods非常简单。Xamarin其实跟OC中使用CocoaPods的方式基本相同，只是采用了一个类库转化工具去执行这个过程，其本质和内部原理都和OC中一样。只是在使用上不像OC中直接在程序中就能引用第三方库，Xamarin在使用CocoaPods导入第三方库的时候还是需要通过sharpie pod命令生成两个.cs文件去转换相应的方法和属性。 ###CocoaPods环境安装和配置 #####1、升级Ruby环境 在安装CocoaPods之前，首先要在本地安装好Ruby环境,但是Mac中一般自带Ruby，所以我们只需要去更新Ruby即可。1终端输入 :$ gem update --system 如果你此时遇到错误 You don’t have write permissions for the Liabrary/Ruby/Gems/2.0.0 directory 一般因为你没有权限去执行，执行将上文命令改为这个即可。1终端输入 :$ sudo gem update --system 如果出现以下提示，代表你已经安装最新Ruby，无需更新 Latest version currently installed. Aborting. #####2、更换Ruby镜像 当我们使用CocoaPods自动添加第三方开源库的时候，我们通过输入命令系统会自动下载，此时需要使用到Ruby，但是系统内置的Ruby镜像下载非常缓慢，我们首先移除现有的Ruby镜像1终端输入 :$ sudo gem sources --remove https://rubygems.org/ 然后添加国内最新镜像源（淘宝的Ruby镜像已经不更新了，无法使用）1终端输入 :$ sudo gem source -a https://gems.ruby-china.org/ 替换后查看当前镜像1终端输入 :$ sudo gem sources -l 如果此时只显示这一个镜像即成功，否则删除重新设置 https://gems.ruby-china.org/ #####3、安装CocoaPods 在终端中输入以下命令安装CocoaPods1终端输入 :$ sudo gem install cocoapods 如果出现了以下的错误提示: 说明你没有权限，修改命令为1终端输入 :$ sudo gem install -n /usr/local/bin cocoapods 如果出现了以下的错误提示：12ERROR: While executing gem ... (Gem::DependencyError) Unable to resolve dependencies: cocoapods requires cocoapods-core (= 0.33.1), claide (~&gt; 0.6.1), cocoapods-downloader (~&gt; 0.6.1), cocoapods-plugins (~&gt; 0.2.0), cocoapods-try (~&gt; 0.3.0), cocoapods-trunk (~&gt; 0.1.1), nap (~&gt; 0.7) 说明你Ruby环境与问题，更新本地的Ruby环境：1sudo gem update --system 等待安装、成功后会有以下提示 到这之后再执行（PS：这个过程是漫长的，要有耐心）1终端输入 :$ pod setup 等待漫长的安装过程后，在你的Mac中就配置好了CocoaPods环境。 #####CocoaPods的使用首先我们使用CocoaPods导入AFNetworking框架为例，在终端中输入命令1终端输入 :$ sharpie pod init ios AFNetworking 如果出现以下提示，即代表已经初始化AFNetworking类库完成** Setting up CocoaPods master repo ... (this may take a while the first time) ** Searching for requested CocoaPods ... ** Working directory: ** - Writing Podfile ... ** - Installing CocoaPods ... ** (running &quot;pod install --no-integrate --no-repo-update&quot;) Analyzing dependencies Downloading dependencies Installing AFNetworking (2.6.0) Generating Pods project Sending stats ** 🍻 Success! You can now use other &quot;sharpie pod&quot; commands. 接着我们需要绑定相应的类库去生成转换后的.cs文件 1终端输入 :$ sharpie pod bind 如果出现以下提示，即代表转换完成，我们去当前路径目录下去Binding文件夹下就能找到相应的转换后的文件(... lots of build output ...) Parsing 19 header files... Binding... [write] ApiDefinitions.cs [write] StructsAndEnums.cs Done. 到这里两个.cs文件已经生成完成，我们只需要建立一个Binding Liabrary去为我们Xamarin.iOS项目去提供引用即可。 注意事项:1.这个在建立Binding Liabrary的时候，我们引用完.a文件，复制完两个.cs文件中的代码后，编译一般我们会发现很多错误。此时我们不要着急和害怕，因为许多错误都是转换过程中某些类名称有误，此时我们只需要一个个或者批量更改就行。例如错误提示NSURLRequest找不到相应的类，此时我们只需要重写编写你会发现在C#中应该写为NSUrlRequest。还有许多都是这样的错误一个个更改就行。2.当我们更改完系统转换时生成的类名错误后，接着就会出现 [Verify]错误，此时我们只需要删去所有报错地方的 [Verify]标签即可。3.当改完上边两个错误时，接着我们就会面临Static的问题，这个问题也是一样报错的地方删除即可。4.一般当我们改完上边提到的错误后，我们再进行编译即可完成。 到这里Xamarin.iOS CocoaPods的使用介绍就完成了，希望能对您有所帮助。]]></content>
      <categories>
        <category>Bindings</category>
      </categories>
      <tags>
        <tag>Xamarin</tag>
        <tag>Bindings</tag>
        <tag>Xamarin.iOS</tag>
        <tag>Tools</tag>
        <tag>Objective-sharpie</tag>
        <tag>Cocopods</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xamarin-ios-binding-objectivesharpie-xcode]]></title>
    <url>%2Funcategorized%2Fxamarin-ios-binding-objectivesharpie-xcode%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Xamarin 中如何使用原生 SDK]]></title>
    <url>%2FBindings%2Fxamarin-binding-intro%2F</url>
    <content type="text"><![CDATA[写在前面： https://medium.com/@wasihaiderdev/my-experience-writing-a-xamarin-binding-project-2d63efe90eff]]></content>
      <categories>
        <category>Bindings</category>
      </categories>
      <tags>
        <tag>Xamarin</tag>
        <tag>Library</tag>
        <tag>Android</tag>
        <tag>iOS </tag>
        <tag>Bindings</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在 Xamarin.iOS 应用程序中使用 Objective-C 库]]></title>
    <url>%2FBindings%2Fxamarin-ios-binding-oc%2F</url>
    <content type="text"><![CDATA[写在前面： 说完上边这一段我自己对Xamarin的理解之后，我们进入正题开始说说怎么在Xamarin项目中链接源生的第三方库(这里我们只谈iOS,Android的第三方库使用我们以后再介绍) 我们链接第三方库的步骤：1.建立一个静态库，关于静态库和动态库的介绍你可以看这篇文章。2.新建一个Xamarin.iOS binding Project，这个项目包含我们刚才新建的静态库和以C#代码展示的解释OC的API如何使用的元数据。3.规范API的定义，这里我们通常会对用Objective Sharpie类库转化工具自动转化生成的API定义进行处理，把一些错误给完善。4.引用这个绑定的项目。 建立静态库 首先我们拿 github 上的 InfColorPicker 作为例子，我们先在 github 上下载或者 clone 这个类库: 然后我们用 Xcode 打开 PickerSamplePhone 这个项目，我们可以发现项目的结构如下，一般跟类库名字同名的文件夹就是我们需要用来建立静态的文件 然后我们打开Xcode，File &gt; New &gt; Project &gt; Framework &amp; Library &gt; Cocoa Touch Static Library，然后点击下一步，填写项目名称为 InfColorPicker结束创建。 然后我们需要将下载的类库包中同名文件夹下的所有文件复制到我们的静态库项目中 然后我们需要修改自动创建的InfColorPicker.m文件，注释最后两行代码，因为库的写入方式不需要我们使用该文件 然后我们需要给项目添加依赖库，InfColorPicker target &gt; Build Phases &gt;Link Binary With Libraries &gt;+ 然后选择编译执行，到这一步我们的静态库文件算完成了一半，但是需要将生成的.a文件进一步加工，使它适配模拟器和真机的所有架构。 我们接着需要通过终端进入我们项目目录中，新建一个MakeFile文件，vim MakeFile 然后在vim编辑器中复制以下代码，将这个文件中YOUR-PROJECT-NAME 改为您的项目名称(如InfColorPicker)123456789101112131415161718192021222324XBUILD=/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuildPROJECT_ROOT=./YOUR-PROJECT-NAMEPROJECT=$(PROJECT_ROOT)/YOUR-PROJECT-NAME.xcodeprojTARGET=YOUR-PROJECT-NAMEall: lib$(TARGET).alib$(TARGET)-i386.a: $(XBUILD) -project $(PROJECT) -target $(TARGET) -sdk iphonesimulator -configuration Release clean build -mv $(PROJECT_ROOT)/build/Release-iphonesimulator/lib$(TARGET).a $@lib$(TARGET)-armv7.a: $(XBUILD) -project $(PROJECT) -target $(TARGET) -sdk iphoneos -arch armv7 -configuration Release clean build -mv $(PROJECT_ROOT)/build/Release-iphoneos/lib$(TARGET).a $@lib$(TARGET)-arm64.a: $(XBUILD) -project $(PROJECT) -target $(TARGET) -sdk iphoneos -arch arm64 -configuration Release clean build -mv $(PROJECT_ROOT)/build/Release-iphoneos/lib$(TARGET).a $@lib$(TARGET).a: lib$(TARGET)-i386.a lib$(TARGET)-armv7.a lib$(TARGET)-arm64.a xcrun -sdk iphoneos lipo -create -output $@ $^clean: -rm -f *.a *.dll 注意事项：如果修改完成后推出vim编辑器输入make指令后出错，我们需要将里面所有的头部四个空格的地方全部删去，换成一个Tab键 编译成功后会看到一下的界面 然后在项目文件夹中你会发现以下几个文件 同样你可以在终端中输入这段命令xcrun -sdk iphoneos lipo -info libInfColorPicker.a，去检查你的.a文件支持的架构。 #####2.新建Xamarin.iOS Binding Project 打开VS &gt; File &gt; New &gt; Project&gt; iOS &gt; Bindings Library，输入项目名称完成创建 创建完成后会自动生成两个文件ApiDefinition.cs：这个文件包含如何将OC API转化为 C#Structs.cs：这个文件主要是一些代理和接口所需枚举和结构体 然后将刚才生成的.a文件复制到您的项目文件夹中并添加到项目中去 接着我们需要回到Mac 终端中，根据Objective Sharpie类库转化工具去生成上边两个文件相应的内容，这里我们就不给出详细步骤了，可以参考我之前写的文章。 12//复制以下代码到终端sharpie bind --output=InfColorPicker --namespace=InfColorPicker --sdk=[iphone-os] [full-path-to-project]/InfColorPicker/InfColorPicker/*.h 完成后会在您的项目文件夹下多出两个文件，分别是我们在VS中创建项目自动生成的两个文件的内容 分别复制两个文件里面的所有内容到指定的文件中 #####3.规范API的定义 在上面我们完成了Xamarin.iOS Binding Project的工作后，我们点击编译生成，如果我们发现有错误，我们查看错误提示，根据错误提示我们会发现[Verify]这样的一个东西，我们直接根据提示删除所有错误的[Verify]，再次编译生成即可。 到这里我们的第三方库的转化就基本完成了，接着我们只需去把建好的Xamarin.iOS Binding Project生成的dll文件复制出来，添加到Xamarin.iOS项目文件夹中，添加引用，在需要使用第三方库的文件中导入头文件即可使用。 总而言之：在Xamarin中使用源生的第三方库我们不能直接向源生那样拖到项目目录中，我们需要去建立一个Binding Project，然后根据这个项目间接的去实现引用。同样有的时候我们还需要再对这个Binding Project去进一步的完善，根据要实现的功能，对某些方法可以进一步封装，这种方式在Xamarin.Forms中用的比较多。 到这里Xamarin.iOS中引用源生第三方库的介绍就完成了，希望能对您有所帮助。——End 有问题可以加我微信，大家一起讨论]]></content>
      <categories>
        <category>Bindings</category>
      </categories>
      <tags>
        <tag>Xamarin</tag>
        <tag>Bindings</tag>
        <tag>Xamarin.iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xamarin-ios-objective-sharpie01]]></title>
    <url>%2FBindings%2Fxamarin-ios-binding-objectivesharpie%2F</url>
    <content type="text"><![CDATA[本文主要介绍我们在面对源生IOS第三方类库的时候怎么把这些第三方的控件或者SDK转化为Xamarin.IOS可用的控件或者库在APP端开发时候我们经常发现，系统提供的控件无法满足我们那欲求不满的项目总监的要求，所以我们总会根据自己的需求去重新封装自定义控件去实现我们的业务需求，而这里推荐还是自己根据原本的控件去进行重写自己封装，但是也有在Gihub上已经被大神封装好的Xamarin.IOS控件或者源生IOS的控件，此时我们也可以通过Xamarin给我们提供的工具把这些源生的IOS转化为Xamarin可使用的dll，然后在我们的项目中进行引用以及实现。这里最重要的一个工具就是Objective Sharpie，通过这个工具我们基本可以实现源生IOS内容在Xamarin.IOS的大部分实现。 目录本文详细涵盖以下主题 1、Objective Sharpie下载及安装 2、Xcode的使用教程及.a文件生成 3、.a文件的适配以及Makefile的使用 4、Objective Sharpie的使用 5、dll文件的生成与调用 Objective Sharpie下载及安装首先我们需要在Mac中或者虚拟机的Mac OS镜像中下载Objective Sharpie这个工具，注意Objective Sharpie这个工具只是在Mac OS X 10.10或者更新的系统中进行下载。(Objective Sharpie下载链接) 下载完成后会出现安装包然后一直点击下一步就能安装成功！ Xcode的使用教程及.a文件生成首先需要我们的Mac中安装Xcode6或者更高版本的Xcode，然后我们打开Xcode去建立一个静态类库(Creat A Static Library) 1、打开Xcode 2、选择File—&gt;New—&gt;Project… 3、选择建立Cocoa Touch Static Library（静态类库） 4、随便填写你的项目名称如（IOSDemo）,点击Next选择项目的保存位置，然后点击OK保存。 5、选取你要转换的源生IOS编写的控件（如我用的DOPDropDownMenu），把文件中的所有.h和.m文件添加到刚创建好的类库中 然后开始编译生成.a文件，这个.a文件就是我们可以Xamarin项目中添加建立Xamarin.IOS项目使用的类库 .a文件的适配以及Makefile的使用此时我们生成的.a文件如果直接使用，在我们模拟器开发调试过程中不会出现问题，但拿到真机开始测试时会发现报错，这个问题原因是我们没有根据Iphone不同的CPU类型生成相应的版本，所以此时我们需要使用Makefile来分别生成满足ARM 7 &amp; ARM64&amp; i386版本的.a文件。 1、首先我们打开终端，在终端中输入命令进入我们所建立类库的文件夹 2、建立Makefile文件，在终端中输入vim Makefile 3、输入以下代码 里面YOUR-PROJECT-NAME输入创建类库时候的项目名称4、输入完成后按Esc+:wq回到终端，然后输入Make，提示Build Succed成功后，会生成三个.a文件 此时的.a文件就已经生成完毕可以被我们建立的Windows下VS中的类库项目调用 Objective Sharpie的使用上面我们已经生成好的.a文件已经可以被我的类库项目调用，但是只有.a文件还是无法完整建立我们的类库文件的，此时我们还有要将.a文件使用Objective Sharpie工具进行处理，将.a文件中的Object-c语法编写的一些类或者方法属性转化为C#语言以供我们类库使用，方便我们以后调用我们自己生成的类库。 1、打开终端，输入以下命令 sharpie bind –output= –namespace= –sdk=[iphone-os] [full-path-to-project]/InfColorPicker/InfColorPicker/*.h 其中–output=，中输入你要保存的文件夹名称 –namespace=，中输入被引用时命名控件名称 [iphone-os]为当前Mac中iphone系统的版本号，在终端中输入 sharpie xcode -sdks 可获取 [full-path-to-project]输入你所建立 Xcode 项目保存的全路径，然后一直找到.h文件的文件 2、生成成功后会在你的目录下出现你刚输入的文件夹名称的文件，里面有两个生成文件InfColorPicker.enums.cs和InfColorPicker.cs，这里面就是转换为C#的代码 此时我们建立类库前的准备工作就全部完成了 dll文件的生成与调用1、打开VS，建立一个新的Project 2、选择建立一个类库 3、新建两个类文件名称为ApiDefinition.cs和Structs.cs 4、然后吧刚才生成的InfColorPicker.cs里面的代码全部复制到ApiDefinition.cs中，把InfColorPicker.enums.cs里面所有的代码复制到Structs.cs中 5、开始编译，编译成功后会在bin目录下生成dll文件提供给我们Xamarin.IOS项目调用了 6、然后在Xamarin.IOS项目中添加引用，找到我们生成的dll文件的位置进行调用，然后引用命名控件即对控件进行布局使用了。 到这里Objective Sharpie这个工具就介绍完毕了，希望大家能有所收获，如果有啥问题，我们可以一起讨论。最后介绍一个我们转换完成并实现的Demo（仿美团下拉列表）]]></content>
      <categories>
        <category>Bindings</category>
      </categories>
      <tags>
        <tag>Xamarin</tag>
        <tag>Bindings</tag>
        <tag>Xamarin.iOS</tag>
        <tag>Tools</tag>
        <tag>Objective-sharpie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xamarin开发(MacOS开发)环境配置]]></title>
    <url>%2FXamarin%2Fxamarin-enviorment-setup-macos%2F</url>
    <content type="text"><![CDATA[写在前面：最近在整理之前写的博客的时候，发现对于 Xamarin 环境开发配置的内容还停留在 VS 2015 以及 Xamarin Studio 的阶段，最近把 Xamarin 环境搭建的文章进行了一次完整的更新，本文将主要介绍 MacOS 上的环境搭建，对于 Windows 上的开发环境配置可以参考 Xamarin开发(Windows开发)环境配置 查看详细介绍，相对 Windows 来说, 在 MacOS 上 Xamarin 的环境搭建相对简单很多，安装一个 Xcode, 以及 VS For Mac 就能搞定，当然其中也有一些坑的地方。 安装开发工具Xcode安装或更新 Xcode 最新版本 打开 App Store，搜索 Xcode，点击安装 注意事项： 运行的Mac的环境需要 macOS Sierra 10.12 或更高版本的 Mac Xcode 8.3 或更高版本。 通常建议使用稳定的最新版本 一个 Apple ID。 如果没有 Apple ID，请在 Apple官网 新建一个。需要 Apple ID 才可安装和登录 Xcode VS For Mac安装 Visual Studio for Mac 下载安装包后，单击 VisualStudioInstaller.dmg 文件装载安装程序，然后通过双击徽标运行它，如下图所示： 系统可能会通过警报对话框发出提示，如下图所示。 在此情况下，点击 Open 安装程序会检查系统，确定需要安装或更新的组件： 之后，会出现一个警报对话框，要求确认隐私和许可条款。 按“继续”按钮接受条款： 安装程序会列出缺少和需要下载并安装的所需组件。 在此处选择要下载的产品： 友情提示：如果你不想在 Mac 上开发调试 Android 和 .NET Core 应用程序，可以不勾选相应的安装选项。 此安装屏幕显示每个组件的版本和大小。 可单击每个组件查看该组件的依赖项列表（对于 Android ），该组件下载的其他包（对于 .NET Core ），或任何其他所需应用程序（对于 iOS 和 macOS ）： 确认选择后，选择“安装和更新”按钮开始安装过程。 安装成功后，可通过按 Start，开始在 Visual Studio for Mac 中开发应用： 注意事项： 在安装 Android 的 SDK 过程中，可能会遇到一直下载失败的情况，由于国内墙的问题，可以连接代理。 详细安装步骤请查看 官方文档 与 Mac 配对启用 Mac 上的远程登录 在 Mac 上，打开 系统首选项 并转到 共享 窗格。 选中 服务 列表中的 远程登录。 从 Visual Studio 2017 连接到 Mac 在 Visual Studio 2017 中，打开现有的 iOS 项目，或者通过选择 File &gt; New &gt; Project，然后选择 iOS 项目模板来创建新的 iOS 项目。 点击工具栏上 与 Mac 配对 按钮 与 Mac 配对 对话框显示所有之前连接的和当前可用的 Mac 生成主机的列表： 选择列表中的 Mac，单击 Connect 输入用户名和密码(首次连接到某特定 Mac ) 注意事项： 当 Mac 和 PC 在同一局域网内时，当前 Mac 会自动显示在列表中，当没有时可以 手动添加 Mac 检查 Windows 中 Xamarin iOS 版本号 是否 Mac 中保持一致 (这里的一致为大版本一致如：Windwos 11.6.1.4 与 Mac Xamarin.iOS 11.6.1.2 可认为保持一致), 如果不一致会导致无法匹配成功 从 Visual Studio 2017 15.6 开始，与 Mac 配对 会自动使用生成 Xamarin.iOS 应用程序所需的软件 Mono、Xamarin.iOS（软件框架，而不是 Visual Studio for Mac IDE） 以及各种与 Xcode 相关的工具（而不是 Xcode 自身）来预配 Mac。详细介绍请查看 自动预配 Mac]]></content>
      <categories>
        <category>Xamarin</category>
      </categories>
      <tags>
        <tag>Xamarin</tag>
        <tag>MacOS</tag>
        <tag>enviorment-setup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xamarin开发(Windows开发)环境配置]]></title>
    <url>%2FXamarin%2Fxamarin-enviorment-setup-windows%2F</url>
    <content type="text"><![CDATA[写在前面：最近在整理之前写的博客的时候，发现对于 Xamarin 环境开发配置的内容还停留在 VS 2015 以及 Xamarin Studio 的阶段，最近把 Xamarin 环境搭建的文章进行了一次完整的更新，本文将主要介绍 Windows 上的环境搭建，对于 Mac 上的开发环境配置可以参考 Xamarin开发(Mac开发)环境配置 查看详细介绍，相对 Mac 来说, 在 Windows 上 Xamarin 的环境搭建相对麻烦很多，而且其中需要注意的点也非常多。 安装 Visual Studio 2017 搭建 Xamarin 开发环境准备工作在 Visual Studio 2017 中安装 Xamarin 需要以下项： Windows 7 或更高版本 Visual Studio 2017 Community / Professional / Enterprise 根据不同类型的 对比 选择相应的 Visual Studio 版本 Xamarin for Visual Studio 注意事项：有关安装和使用 Xamarin 的先决条件的详细信息，请参阅 Windwos系统要求 和 MacOS系统要求 开始安装 从 Visual Studio 页面下载 Visual Studio 2017 Community、 Visual Studio Professional 或 Visual Studio Enterprise 这里以 VS2017企业版 为例，双击打开下载的安装包： 在安装页面上选择 Mobile development with .NET 选项： 查看右边 Summary 菜单，选择或取消某些特定的安装选项，默认选项如下： 选择完成后点击右下角 Install 按钮，开始安装： 安装完毕后点击 Launch 打开 VS2017 注意事项:对于右侧可选的安装选项，直接保持系统推荐默认的安装项安装即可。 安装完成后，点击 Launch 进入欢迎页,登录你的账号，或者跳过这一步，选择你喜欢的主题之后 启动VisualStudio 注意事项:详细步骤介绍可以查看 官方安装文档 验证 Xamarin 环境 在 Visual Studio 2017 中，可通过单击 Help(帮助) 菜单来验证是否安装了 Xamarin。 如果安装了 Xamarin，应该看到 Xamarin 菜单项，如此屏幕截图所示： 同样也可单击 Help(帮助) &gt; About Microsoft Visual Studio ，滚动浏览已安装的产品列表，查看是否已安装 Xamarin 以及相应的版本信息： 注意事项:有关查找版本信息的详细信息:请参阅 Where can I find my version information and logs? (在何处可找到我的版本信息和日志). Xamarin Android Configuration配置Xamarin.Android 使用 Java 开发工具包 (JDK) 和 Android SDK 生成应用。 在安装过程中，Visual Studio 安装程序会将这些工具放置在其默认位置，并使用适当的路径来配置开发环境。 可单击 Tools &gt; Options… &gt; Xamarin &gt; Android Settings 查看和更改这些位置： 注意事项：对于大多数用户，在安装完成后，默认位置会自动配置完成并起作用，无需进行进一步更改。 但是，如果系统并没有自动检测到默认位置，或你可能希望将 Visual Studio 配置为这些工具的自定义位置（例如：你已在其他位置安装了 Java JDK、 Android SDK 或 NDK）。 单击要更改的路径旁边的 Change，然后导航到新位置。 Android SDK ManagerAndroid 使用多个 Android API Level Settings 来确定应用在各种 Android 版本中的兼容性（有关 Android API Level 的详细信息，请参阅了解 Android API Level）。这里我们可能需要通过 Android SDK Manager 下载和安装其他 Android SDK 组件。 点击 Visual Studio 的 Tools 选项，在 Android 项中,选择 Android SDK Manager 如图： 选择 Tools 选项下勾选要求的 Android 工具项，如图： 勾选之后，点击 Apply Changes 之后，等待安装成功就OK了。 详细内容介绍请查看 官方文档 Xamarin Android Device ManagerXamarin Android Device Manager 可以创建和配置 Android 虚拟设备 (AVD)，在这里我们可以创建 Android 模拟器方便调试开发。 注意事项：若要使用 Android Device Manager，需要具备以下各项： 需要 Visual Studio 2017 版本 15.7 或更高版本。 支持 Visual Studio Community、Professional 和 Enterprise 版本。 Visual Studio Tools for Xamarin 版本 4.9 或更高版本。 必须安装 Android SDK（请参阅 设置用于 Xamarin.Android 的 Android SDK），并且必须安装 SDK 工具版本 26.1.1 或更高版本。(如果尚未安装请安装到以下路径中：C:\Program Files (x86)\Android\android-sdk。) 默认情况下会自动选择 Xamarin Device Manage，如果没有此选项，可以返回 VS Installer 中拓展安装，或者使用下载方式安装： Windows 环境点击下载 Xamarin Device Manager 双击 Xamarin.DeviceManager.msi，安装管理器 安装完成后通过单击 “ Tools ” &gt; “ Android ” &gt; “ Android Device Manager ”: 点击右上角 New 进入到添加页面，之后点击 Create 创建模拟器: 完成后就可以新建一个 Xamarin.Forms 或者 Xamarin.Android 项目选择刚才新建的模拟器进行调试运行，检查环境安装是否完整。 Xamarin iOS Configuration设置 MacOS 主机在 Windwos 中进行 iOS 应用程序的开发时，需要准备一个 MacOS 作为你的调试终端，从而编译和调试你的应用程序。要生成、调试 iOS 应用程序以及对其进行签名以进行分发，Visual Studio 2017 必须能够通过网络访问已经配置了 Apple 开发人员工具 (Xcode) 和 Xamarin.iOS 的 Mac 主机。详细 Xamarin.iOS 的开发环境配置可以查看 Xamarin开发(Mac开发)环境搭建 查看详细介绍。 注意事项:如果不想安装 Visual Studio for Mac，从 Visual Studio 2017 15.6 版本 开始，Visual Studio 2017 会自动生成 Xamarin.iOS 应用程序所需的软件 Mono、Xamarin.iOS（软件框架，而不是 Visual Studio for Mac IDE） 以及各种与 Xcode 相关的工具（而不是 Xcode 自身）来预配 Mac。 有关详细信息，请参阅自动预配 Mac。 将 Visual Studio 2017 连接到 MacVisual Studio 2017 的 与 Mac 配对 功能会发现、连接到 Mac 生成主机、对其进行验证并记住生成主机，以便基于 Windows 的 iOS 开发人员能够高效工作。 启用 Mac 上的远程登录若要设置 Mac 生成主机，首先启用远程登录： 在 Mac 上，打开 系统首选项 并转到 共享 窗格。 选中 服务 列表中的 远程登录。 确保 远程登录 配置为 允许所有用户 访问，或确保 Mac 用户名或组包含在允许用户列表中。 如果和 Windows 计算机位于同一局域网内，则 Visual Studio 2017 会自动识别到 Mac。 如果仍无法发现 Mac，请尝试 手动添加 Mac 或查看 疑难解答指南。 从 Visual Studio 2017 连接到 Mac启用远程连接后，将 Visual Studio 2017 连接到 Mac。 在 Visual Studio 2017 中，打开现有的 iOS 项目，或者通过选择 文件 &gt; 新建 &gt; 项目，然后选择 iOS 项目模板来创建新的 iOS 项目。 打开 与 Mac配对 对话框。 使用 与 Mac配对 按钮 iOS 工具栏： 或者，选择 工具 &gt; iOS &gt; 与 Mac配对。 与 Mac配对 对话框显示所有之前连接的和当前可用的 Mac 生成主机的列表： 选择列表中的 Mac。 单击 连接 输入用户名和密码。 第一次连接到某特定 Mac 时，会提示为该计算机输入用户名和密码： -与 Mac配对 使用这些凭据创建到 Mac 的新 SSH 连接。 如果成功，会向 Mac 上的 authorized_keys 文件中添加一个密钥。 以后连接该 Mac 时会自动登录。 注意事项：登录时，使用系统用户名而不是全名。 详细 与 Mac配对 教程可以查看官方文档 通过“与 Mac 配对”进行 Xamarin.iOS 开发。]]></content>
      <categories>
        <category>Xamarin</category>
      </categories>
      <tags>
        <tag>Xamarin</tag>
        <tag>enviorment-setup</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
</search>
